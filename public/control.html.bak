<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Control Panel</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      background: linear-gradient(135deg, #b85233 0%, #e64210 100%);
      min-height: 100vh;
      margin: 0;
      padding: 0;
    }

    #logo {
      max-width: 75px;
      margin: 10px auto;
      display: block;
    }

    .control-panel {
      background-color: white;
      padding: 1.5rem;
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      max-width: 28rem;
      margin: 1.5rem auto;
      transition: opacity 0.3s ease-in-out;
    }

    .control-panel.loading {
      opacity: 0.5;
    }

    .button-box {
      background-color: #add8e6; /* Light bluish color */
      padding: 1rem;
      border-radius: 0.5rem;
      margin-bottom: 1.5rem; /* Increased gap */
    }

    button {
      background-color: #f4a261; /* Orangish color before click */
      color: black; /* Black text before click */
      border: none;
      padding: 0.5rem 1rem;
      margin: 0.25rem 0;
      cursor: pointer;
      border-radius: 0.25rem;
      font-size: 1rem;
      width: 100%; /* Full width within box */
      transition: background-color 0.2s, color 0.2s; /* Smooth transition */
    }

    button:active {
      background-color: #f97316; /* Orange color after click */
      color: white; /* White text after click */
    }

    button:hover {
      background-color: #e07a5f; /* Slightly darker orangish on hover */
    }

    label {
      display: block;
      margin-top: 0.75rem;
      font-weight: 500;
      color: #1f2937;
    }

    select, input {
      margin-bottom: 0.5rem;
      padding: 0.5rem;
      width: 100%;
      max-width: 100%;
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      font-size: 1rem;
    }

    #error {
      color: #dc2626;
      margin-top: 0.75rem;
    }

    @media (max-width: 640px) {
      .control-panel { max-width: 100%; padding: 1rem; }
      .button-box { padding: 0.75rem; }
      button { width: 100%; }
    }
  </style>
</head>
<body>
  <img id="logo" src="/uploads/logos/bbeft.jpg" alt="Auction Logo">
  <h1 class="text-3xl font-bold text-white text-center mt-4">Auction Control</h1>
  <div class="control-panel loading">
    <!-- Start Bidding Section -->
    <div class="button-box">
      <label>Player:</label>
      <select id="playerSelect" required>
        <option value="">Select Player</option>
      </select>
      <button id="startButton">Start Bidding</button>
    </div>

    <!-- Increment Button -->
    <div class="button-box">
      <button id="incrementButton">Increment +50</button>
    </div>

    <!-- Sold Section -->
    <div class="button-box">
      <label>Team (for Sold):</label>
      <select id="teamSelect" required>
        <option value="">Select Team</option>
        <option value="The Blue Bloods">The Blue Bloods</option>
        <option value="BB Young Bloods">BB Young Bloods</option>
        <option value="Power Strikers">Power Strikers</option>
        <option value="BB Lions">BB Lions</option>
        <option value="Duronto Express">Duronto Express</option>
      </select>
      <button id="soldButton">Sold!</button>
    </div>

    <!-- Unsold Section -->
    <div class="button-box">
      <button id="unsoldButton">Unsold</button>
    </div>

    <!-- Undo Section -->
    <div class="button-box">
      <button id="undoButton">Undo</button>
    </div>

    <!-- Reset Auction Section -->
    <div class="button-box">
      <button id="resetButton">Reset Auction</button>
    </div>

    <div id="error"></div>
  </div>

  <script>
    const playerSelect = document.getElementById('playerSelect');
    const socket = io();
    let auctionState = {};

    // Initial load of players with original numbering
    let originalPlayers = [];
    function loadPlayers() {
      Promise.all([
        fetch('/players').then(res => res.json()),
        fetch('/sold-players').then(res => res.json())
      ])
        .then(([players, soldPlayers]) => {
          originalPlayers = players.map((p, i) => ({ ...p, originalIndex: i + 1 }));
          updateDropdown(soldPlayers);
        })
        .catch(error => {
          document.getElementById('error').textContent = `Failed to load players: ${error.message}`;
          fetch('/players').then(res => res.json()).then(players => {
            originalPlayers = players.map((p, i) => ({ ...p, originalIndex: i + 1 }));
            updateDropdown([]);
          });
        });
    }

    // Update dropdown based on sold players and current state
    function updateDropdown(soldPlayers) {
      const soldSet = new Set(soldPlayers);
      playerSelect.innerHTML = '<option value="">Select Player</option>';
      originalPlayers.forEach(player => {
        if (!soldSet.has(player.name)) {
          const option = document.createElement('option');
          option.value = player.name;
          option.textContent = `${player.originalIndex}. ${player.name} (${player.role}, Base: ${player.basePrice})`;
          if (auctionState?.isBidding && auctionState?.name === player.name) {
            option.selected = true; // Keep current player selected during bidding
          }
          playerSelect.appendChild(option);
        }
      });
    }

    // Refresh players on update event with error handling
    socket.on('update', (state) => {
      auctionState = state; // Update local auctionState with the received state
      const controlPanel = document.querySelector('.control-panel');
      controlPanel.classList.add('loading');
      fetch('/sold-players', {
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
      })
        .then(res => {
          if (!res.ok) throw new Error(res.status === 404 ? '404: Not Found' : `HTTP error! Status: ${res.status}`);
          return res.json();
        })
        .then(soldPlayers => updateDropdown(soldPlayers))
        .catch(error => {
          console.error('Failed to fetch sold players:', error);
          document.getElementById('error').textContent = `Failed to update players: ${error.message}`;
          fetch('/players').then(res => res.json()).then(players => {
            originalPlayers = players.map((p, i) => ({ ...p, originalIndex: i + 1 }));
            updateDropdown([]);
          });
        })
        .finally(() => controlPanel.classList.remove('loading'));
    });

    // Initial load
    loadPlayers();

    // Handle Start Bidding
    document.getElementById('startButton').addEventListener('click', () => {
      const name = playerSelect.value;
      if (!name) {
        document.getElementById('error').textContent = 'Please select a player!';
        return;
      }
      const formData = new FormData();
      formData.append('name', name);

      fetch('/start', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = '';
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to start bidding: ${error.message}`;
      });
    });

    // Handle Increment
    document.getElementById('incrementButton').addEventListener('click', () => {
      fetch('/increment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: 50 })
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = '';
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to increment: ${error.message}`;
      });
    });

    // Handle Sold
    document.getElementById('soldButton').addEventListener('click', () => {
      const team = document.getElementById('teamSelect').value;
      if (!team) {
        document.getElementById('error').textContent = 'Please select a team!';
        return;
      }
      fetch('/sold', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ team })
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = '';
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to sell: ${error.message}`;
      });
    });

    // Handle Unsold
    document.getElementById('unsoldButton').addEventListener('click', () => {
      fetch('/unsold', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = '';
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to mark as unsold: ${error.message}`;
      });
    });

    // Handle Undo
    document.getElementById('undoButton').addEventListener('click', () => {
      fetch('/undo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = 'Undo successful!';
          loadPlayers(); // Refresh player list
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to undo: ${error.message}`;
      });
    });

    // Handle Reset Auction
    document.getElementById('resetButton').addEventListener('click', () => {
      fetch('/reset', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })
      .then(response => {
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        return response.json();
      })
      .then(data => {
        if (data.error) {
          document.getElementById('error').textContent = data.error;
        } else {
          document.getElementById('error').textContent = 'Auction reset successfully!';
          loadPlayers(); // Reload all players after reset
        }
      })
      .catch(error => {
        document.getElementById('error').textContent = `Failed to reset: ${error.message}`;
      });
    });
  </script>
</body>
</html>